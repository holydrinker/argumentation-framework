%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% INPUT AF (A,R) given via arg(.) and att(.,.).
%% OUTPUT all stage2 extensions of the input AF
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% HELPERS --- as usual
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
lt(X,Y) :- arg(X),arg(Y), X<Y.
nsucc(X,Z) :- lt(X,Y), lt(Y,Z).
succ(X,Y) :- lt(X,Y), not nsucc(X,Y).
ninf(X) :- lt(Y,X).
nsup(X) :- lt(X,Y).
inf(X) :- not ninf(X), arg(X).
sup(X) :- not nsup(X), arg(X).


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Guess conflict-free S\subseteq A
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

in(X)  :- not out(X), arg(X).
out(X) :- not in(X),  arg(X).
:- in(X), in(Y), att(X,Y).

% check if the guess is a naive extension

conflicting(X) :- att(Y,X), out(X), in(Y).
conflicting(X) :- att(X,Y), out(X), in(Y).
conflicting(X) :- att(X,X).
:- not conflicting(X), out(X), arg(X).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Copy all arguments to set with least index.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

arg_set(N,X) :- arg(X), inf(N).


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% reachability and component defeated args wrt index N
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

reach(N,X,Y):-arg_set(N,X),arg_set(N,Y),att(X,Y).
reach(N,X,Y):-arg_set(N,X),att(X,Z),reach(N,Z,Y).
d(N,X) :- arg_set(N,Y), arg_set(N,X), in(Y), att(Y,X), not reach(N,X,Y).


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% copy remaining arguments to next index.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

arg_set(M,X) :- arg_set(N,X), succ(N,M), not d(N,X).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% F_S is obtained by using the arg_set with the largest index M 
% (i.e. A \setminus \Delta, where \Delta is given by predicates d(M,.)
% and restrict to components.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

arg_new(X) :- sup(M), arg_set(M,X).
att_new(X,Y) :- arg_new(X), arg_new(Y), att(X,Y), reach(M,Y,X),  sup(M). 

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% stage part
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% HELPERS --- for the instance
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
ltN(X,Y) :- arg_new(X),arg_new(Y), X<Y.
nsuccN(X,Z) :- ltN(X,Y), ltN(Y,Z).
succN(X,Y) :- ltN(X,Y), not nsuccN(X,Y).
ninfN(X) :- ltN(Y,X).
nsupN(X) :- ltN(X,Y).
infN(X) :- not ninfN(X), arg_new(X).
supN(X) :- not nsupN(X), arg_new(X).

%% Computing the range S+ of the guessed set S
in_range(X) :- in(X).
in_range(X) :- in(Y), att_new(Y,X).
not_in_range(X) :- arg_new(X), not in_range(X).

%% Guess S' \supseteq S for semi-stable
inN(X) v outN(X) :- arg_new(X).

% eqplus checks wheter S'+ equals S+
eqplus_upto(X) :- infN(X), in_range(X), in_rangeN(X).
eqplus_upto(X) :- infN(X), not_in_range(X), not_in_rangeN(X).
eqplus_upto(X) :- succN(Z,X), in_range(X), in_rangeN(X), eqplus_upto(Z).
eqplus_upto(X) :- succN(Z,X), not_in_range(X), not_in_rangeN(X), eqplus_upto(Z).

eqplus :- supN(X), eqplus_upto(X).

%% get those X \notin S' which are not defeated by S'
%% using successor again...

undefeated_upto(X,Y) :- infN(Y), outN(X), outN(Y).
undefeated_upto(X,Y) :- infN(Y), outN(X),  not att_new(Y,X).

undefeated_upto(X,Y) :- succN(Z,Y), undefeated_upto(X,Z), outN(Y).
undefeated_upto(X,Y) :- succN(Z,Y), undefeated_upto(X,Z), not att_new(Y,X).

not_in_rangeN(X) :- supN(Y), outN(X), undefeated_upto(X,Y).
in_rangeN(X) :- inN(X).
in_rangeN(X) :- outN(X), inN(Y), att_new(Y,X).

%% fail if the AF is empty
not_empty :- arg(X).
fail :- not not_empty.

%% S' has to be conflictfree - otherwise fail
fail :- inN(X), inN(Y), att_new(X,Y).

%% fail if S'+ equals S+
fail :- eqplus.

%% fail if S'+ \subset S+
fail :- in_range(X), not_in_rangeN(X).

inN(X) :- fail, arg_new(X).
outN(X) :- fail, arg_new(X).

%% do the final spoil-thing ...
:- not fail.